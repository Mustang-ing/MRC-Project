###############################################################################################
# Partie 1 : requetes pour vérifier l'importation via le script transfer.py

# Requete 1 :  Descriptifs complet des films et des individus qui ont noté ces films par 5
PREFIX movie: <http://www.semanticweb.org/ing-mustang/ontologies/2024/11/Movie.owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT 
    (STR(?movieTitle) AS ?MovieTitle)
    (STR(?releaseDate) AS ?ReleaseDate)
    (STR(?imdbUrl) AS ?IMDbUrl)
    (STR(?movieId) AS ?MovieID)
    (GROUP_CONCAT(STR(?genreName); SEPARATOR=", ") AS ?Genres)
    (STR(?userId) AS ?UserID_Note5)
    (STR(?age) AS ?Age)
    (STR(?gender) AS ?Gender)
    (STR(?occupation) AS ?Occupation)
    (STR(?zipcode) AS ?Zipcode)
    (STR(?itemId) AS ?RatingItemID)
WHERE {
  # Attributs du film
  ?movie movie:movieTitle ?movieTitle .
  ?movie movie:releaseDate ?releaseDate .
  ?movie movie:IMDbUrl ?imdbUrl .
  ?movie movie:movieId ?movieId .
  OPTIONAL {
    ?movie movie:hasForKind ?genre .
    ?genre movie:kind ?genreName .
  }
  
  # Optionnel : Attributs des utilisateurs ayant noté à 5
  OPTIONAL {
    ?ratingInstance rdf:type movie:Rating .
    ?ratingInstance movie:hasForMovie ?movie .
    ?ratingInstance movie:hasForUser ?user .
    ?ratingInstance movie:rate ?rating .
    ?ratingInstance movie:itemId ?itemId .
    FILTER (?rating = 5)
    
    ?user movie:userId ?userId .
    ?user movie:age ?age .
    ?user movie:gender ?gender .
    ?user movie:occupation ?occupation .
    ?user movie:zipcode ?zipcode .
  }
}
GROUP BY ?movieTitle ?releaseDate ?imdbUrl ?movieId ?userId ?age ?gender ?occupation ?zipcode ?itemId


#Requete 2 : le nombre de Movie, de User et de Rating
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX MOVIE: <http://www.semanticweb.org/ing-mustang/ontologies/2024/11/Movie.owl#>

SELECT 
    (COUNT(DISTINCT ?movie) AS ?nombreFilms)
    (COUNT(DISTINCT ?user) AS ?nombreUsers)
    (COUNT(DISTINCT ?rating) AS ?nombreRatings)
WHERE {
    ?movie a MOVIE:Movie .
    ?user a MOVIE:User .
    ?rating a MOVIE:Rating .
}

###############################################################################################

# Partie2: Requetes pour calculer la precisions et le rappel des règles


True Positives (TP) : Les Rating pour lesquels predictedRateRule est correct (c'est-à-dire que la note prédite correspond à la valeur réelle).
False Positives (FP) : Les Rating pour lesquels predictedRateRule est incorrect (c'est-à-dire que la note prédite ne correspond pas à la valeur réelle).
False Negatives (FN) : Les Rating pertinents (ayant une vraie note) pour lesquels predictedRateRule n'a pas fait de prédiction correcte.

Exemple pour Rule1:
      

PREFIX Movie: <http://www.semanticweb.org/ing-mustang/ontologies/2024/11/Movie.owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT 
    (COUNT(?r1) AS ?TP) 
    (COUNT(?r2) AS ?FP) 
    (COUNT(?r3) AS ?FN)
WHERE {
  # True Positives (TP): Les prédictions correctes
  {
    SELECT ?r1
    WHERE {
      ?r1 a Movie:Rating .
      ?r1 Movie:rateRule1 ?predictedRate .
      ?r1 Movie:rate ?actualRate .
      FILTER(?predictedRate = ?actualRate)
    }
  }
  # False Positives (FP): Les prédictions incorrectes
  UNION {
    SELECT ?r2
    WHERE {
      ?r2 a Movie:Rating .
      ?r2 Movie:rateRule1 ?predictedRate .
      ?r2 Movie:rate ?actualRate .
      FILTER(?predictedRate != ?actualRate)
    }
  }
  # False Negatives (FN): Les cas pertinents non trouvés
  UNION {
    SELECT ?r3
    WHERE {
      ?r3 a Movie:Rating .
      ?r3 Movie:rate ?actualRate .
      FILTER NOT EXISTS {
        ?r3 Movie:rateRule1 ?predictedRate .
        FILTER(?predictedRate = ?actualRate)
      }
    }
  }
}


